workflows:
  ios-simulator-test:
    name: iOS Simulator Test
    environment:
      flutter: stable
      xcode: 16.4
      cocoapods: 1.16.2
      vars:
        DEV_EMAIL: "kensaku.ikeda04@gmail.com"  # 実際のメールアドレスに変更してください
        FIREBASE_IOS_CONFIG: $FIREBASE_IOS_CONFIG
    scripts:
      - name: Flutter setup
        script: |
          flutter --version
          flutter clean
          flutter packages pub get
          flutter doctor -v
      
      - name: Code analysis
        script: |
          flutter analyze --no-fatal-infos || true
          flutter test || echo "Tests failed but continuing with build"
      
      - name: Setup Firebase config
        script: |
          echo "Checking FIREBASE_IOS_CONFIG environment variable..."
          if [ -n "$FIREBASE_IOS_CONFIG" ] && [ "$FIREBASE_IOS_CONFIG" != "\$FIREBASE_IOS_CONFIG" ]; then
            echo "FIREBASE_IOS_CONFIG is set, processing..."
            # Try to decode base64 first, then fallback to direct content
            if echo "$FIREBASE_IOS_CONFIG" | base64 -d > ios/Runner/GoogleService-Info.plist 2>/dev/null; then
              echo "Firebase iOS config created from base64 encoded environment variable"
            else
              # Remove any potential escape characters and write the config directly
              echo "$FIREBASE_IOS_CONFIG" | sed 's/\\$/\$/g' > ios/Runner/GoogleService-Info.plist
              echo "Firebase iOS config created from environment variable"
            fi
            # Validate the plist file
            plutil -lint ios/Runner/GoogleService-Info.plist || {
              echo "Error: Invalid plist file generated from FIREBASE_IOS_CONFIG"
              echo "Content preview (first 10 lines):"
              head -10 ios/Runner/GoogleService-Info.plist
              exit 1
            }
          else
            echo "Warning: FIREBASE_IOS_CONFIG not properly set, using default config"
            echo "Please set FIREBASE_IOS_CONFIG in Codemagic environment variables"
            # Create a minimal valid plist for testing
            cat > ios/Runner/GoogleService-Info.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CLIENT_ID</key>
    <string>dummy-client-id.apps.googleusercontent.com</string>
    <key>API_KEY</key>
    <string>dummy-api-key</string>
    <key>PROJECT_ID</key>
    <string>dummy-project</string>
    <key>BUNDLE_ID</key>
    <string>com.ikcoding.maikago</string>
</dict>
</plist>
EOF
          fi
      
      - name: iOS build
        script: |
          cd ios
          pod deintegrate
          pod cache clean --all
          pod repo update
          pod install --repo-update --verbose
          cd ..
          # Validate all plist files before building
          find ios -name "*.plist" -exec plutil -lint {} \;
          flutter build ios --simulator --debug --no-codesign --verbose
      
      - name: Build verification
        script: |
          echo "iOS build completed successfully"
          ls -la build/ios/iphonesimulator/
    
    artifacts:
      - build/ios/iphonesimulator/*.app
      - build/ios/iphonesimulator/*.dSYM.zip
      - flutter_drive.log
    
    publishing:
      email:
        recipients:
          - $DEV_EMAIL
        notify:
          success: true
          failure: true
      
  android-build:
    name: Android Build
    environment:
      flutter: stable
      android_signing:
        - keystore_reference
      vars:
        DEV_EMAIL: "kensaku.ikeda04@gmail.com"  # 実際のメールアドレスに変更してください
    scripts:
      - name: Flutter setup
        script: |
          flutter --version
          flutter packages pub get
          flutter doctor -v
      
      - name: Code analysis
        script: |
          flutter analyze --no-fatal-infos || true
          flutter test || echo "Tests failed but continuing with build"
      
      - name: Android build
        script: |
          flutter build apk --debug
          flutter build appbundle --debug
    
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    
    publishing:
      email:
        recipients:
          - $DEV_EMAIL
        notify:
          success: true
          failure: true
