rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーコレクションのルール
    match /users/{userId} {
      // 認証されたユーザーは自分のドキュメントのみ読み書き可能
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 匿名ユーザーも自分のドキュメントにアクセス可能（uidが一致する場合）
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // ファミリーメンバーの表示名取得のため、他のユーザーのプロフィール情報を読み取り可能
      allow read: if request.auth != null;
      
      // ユーザーのサブコレクション（items, shops）のルール
      match /items/{itemId} {
        // 認証されたユーザーは自分のアイテムのみ読み書き可能
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /shops/{shopId} {
        // 認証されたユーザーは自分のショップのみ読み書き可能
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // ファミリーメンバーのプロフィール情報のルール
      match /familyMembers/{memberId} {
        // ファミリーオーナーは自分のファミリーメンバーの情報を読み書き可能
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // ファミリーメンバーは自分のプロフィール情報を更新可能（参加時）
        allow create, update: if request.auth != null && request.auth.uid == memberId;
      }
      
      // ユーザーのサブスクリプション情報のルール
      match /subscription/{subscriptionId} {
        // 認証されたユーザーは自分のサブスクリプション情報のみ読み書き可能
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // ファミリー参加時：他のユーザーのサブスクリプション情報を読み取り可能
        // （QRコードで招待された場合の検証用）
        allow read: if request.auth != null;
        
        // ファミリー参加時：他のユーザーのサブスクリプション情報に自分を追加可能
        // （familyMembers配列に自分のUIDを追加する場合のみ）
        allow update: if request.auth != null && 
          request.auth.uid != userId && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyMembers', 'updatedAt']);
        
        // ファミリー参加時：ファミリーオーナーにプロフィール情報を保存可能
        // （familyMembers配列に自分のUIDを追加する場合のみ）
        allow update: if request.auth != null && 
          request.auth.uid != userId && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyMembers', 'updatedAt']) &&
          request.resource.data.familyMembers.hasAll(resource.data.familyMembers) &&
          request.resource.data.familyMembers.hasAny([request.auth.uid]);
      }
      
      // ユーザーの寄付データのルール
      match /donations/{donationId} {
        // 認証されたユーザーは自分の寄付データを読み取り可能
        // 書き込みはクライアントから禁止（サーバー/Cloud Functions のみ想定）
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false;
      }
    }
    
    // ファミリー共有機能のルール
    match /families/{familyId} {
      // 新規作成時は認証されたユーザーが作成可能
      allow create: if request.auth != null;
      
      // 読み取り：認証されたユーザーなら誰でも読み取り可能
      // （招待承認プロセスをサポートするため）
      allow read: if request.auth != null;
      
      // 更新：メンバー、オーナー、または新規メンバー追加時
      allow update: if request.auth != null && (
        // 既存メンバーまたはオーナー
        (resource.data.members != null && resource.data.members[request.auth.uid] != null) ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.members != null && isMemberInArray(resource.data.members, request.auth.uid)) ||
        // 新しいメンバーが自分自身を追加する場合（招待承認時）
        // members配列のサイズが1つ増え、新しいメンバーが自分自身である場合
        (request.resource.data.members.size() == resource.data.members.size() + 1 && 
         isAddingSelfAsMember(resource.data.members, request.resource.data.members, request.auth.uid))
      );
      
      allow delete: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
      
      // ヘルパー関数：メンバー配列にユーザーが存在するかチェック
      function isMemberInArray(members, userId) {
        return members.size() > 0 && (
          (members[0] is map && members[0].id == userId) ||
          (members.size() > 1 && members[1] is map && members[1].id == userId) ||
          (members.size() > 2 && members[2] is map && members[2].id == userId) ||
          (members.size() > 3 && members[3] is map && members[3].id == userId) ||
          (members.size() > 4 && members[4] is map && members[4].id == userId)
        );
      }
      
      // ヘルパー関数：自分自身をメンバーとして追加しているかチェック
      function isAddingSelfAsMember(oldMembers, newMembers, userId) {
        // 新しいメンバーリストに自分が含まれているが、古いリストには含まれていない
        return isMemberInArray(newMembers, userId) && !isMemberInArray(oldMembers, userId);
      }
    }
    
    // ファミリー招待のルール
    match /familyInvites/{inviteId} {
      // 新規作成時は認証されたユーザーが作成可能
      allow create: if request.auth != null;
      
      // 既存データの読み書きは招待の作成者または招待対象者のみ
      allow read, write: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        // 招待トークンによる検証のため、読み取りを許可
        true
      );
    }
    
    // 送信型共有機能のルール
    match /transmissions/{transmissionId} {
      // 新規作成時は送信者のみ
      allow create: if request.auth != null && 
        request.resource.data.sharedBy == request.auth.uid;
      
      // 既存データの読み書きは送信者または受信者のみ
      allow read, write: if request.auth != null && (
        resource.data.sharedBy == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );
    }
    
    // 送信履歴のルール
    match /transmissionHistory/{historyId} {
      // 新規作成時は送信者のみ
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      
      // 既存データの読み書きは送信者のみ
      allow read, write: if request.auth != null && 
        resource.data.senderId == request.auth.uid;
    }
    
    // リアルタイム共有機能 - 同期データのルール
    match /syncData/{syncId} {
      // 新規作成時は作成者のみ
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // 既存データの読み書きは作成者または共有対象者のみ
      allow read, write: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );
    }
    
    // リアルタイム共有機能 - 通知のルール
    match /notifications/{userId} {
      // 新規作成時は通知の所有者または送信者
      allow create: if request.auth != null && 
        (request.auth.uid == userId || 
         (request.resource.data.sharedBy != null && request.resource.data.sharedBy == request.auth.uid));
      
      // 既存データの読み書きは通知の所有者のみ
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // 通知アイテムのサブコレクション
      match /items/{notificationId} {
        // 新規作成時は通知の所有者または送信者、またはファミリー解散通知の送信者
        allow create: if request.auth != null && 
          (request.auth.uid == userId || 
           (request.resource.data.sharedBy != null && request.resource.data.sharedBy == request.auth.uid) ||
           (request.resource.data.type == 'family_dissolved' && request.auth.uid != userId));
        
        // 既存データの読み書きは通知の所有者のみ
        allow read, write: if request.auth != null && 
          request.auth.uid == userId;
      }
    }
    
    // 匿名ユーザー用のコレクション（スキップ機能用）
    match /anonymous/{sessionId} {
      // 匿名セッションのデータは誰でも読み書き可能（一時的なデータ）
      allow read, write: if true;
      
      match /items/{itemId} {
        allow read, write: if true;
      }
      
      match /shops/{shopId} {
        allow read, write: if true;
      }
    }
    
    // その他のコレクションはデフォルトで拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 