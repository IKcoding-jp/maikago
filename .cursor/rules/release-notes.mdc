# リリースノート作成ルール

## ルールタイプ: Always

### 概要
機能追加、仕様変更、バグ修正を行った際は、必ず以下の手順でリリースノートを作成してください。

### バージョン管理ルール
- **機能追加**: 次のバージョンに記載 (例: 0.8.3 → 0.8.4への変更として記載)
- **仕様変更**: 次のバージョンに記載 (例: 0.8.3 → 0.8.4への変更として記載)
- **バグ修正**: 次のバージョンに記載 (例: 0.8.3 → 0.8.4への変更として記載)
- **緊急修正**: 次のバージョンに記載 (例: 0.8.3 → 0.8.4への変更として記載)
- **pubspec.yamlのバージョン**: ユーザーが明示的に更新するまで変更しない
- **クローズドテスト中**: 1.0.0未満を維持

### リリースノート作成手順

1. **リリースノートファイルの作成**
   - ファイル名: `RELEASE_NOTES_v{新バージョン}.md`
   - 例: `RELEASE_NOTES_v0.8.4.md`

2. **リリースノートの内容**
   ```markdown
   # まいカゴ v{現在バージョン} → v{次のバージョン} リリースノート

   ## 変更内容

   ### 🆕 新機能
   - [新機能の説明]

   ### 🔄 仕様変更
   - [仕様変更の説明]

   ### 🐛 バグ修正
   - [バグ修正の説明]

   ### 🔧 その他の改善
   - [その他の改善点]

   ## 技術的な変更
   - [技術的な変更点があれば記載]

   ## 既知の問題
   - [既知の問題があれば記載]

   ## 次のリリース予定
   - [次のリリースで予定している機能]
   ```

3. **コミットメッセージの形式**
   ```
   feat: 新機能の追加
   fix: バグ修正
   change: 仕様変更
   docs: ドキュメント更新
   ```

### 注意事項
- デバッグログは必ず日本語で記述
- 変更内容は具体的で分かりやすく記載
- ユーザーにとって重要な変更は上部に配置
- 技術的な詳細は「技術的な変更」セクションに記載
- pubspec.yamlのバージョンが変わらない限り、次のバージョンへの変更として記載し続ける
- クローズドテスト中は1.0.0未満のバージョンを維持

### 自動化推奨事項
- バージョン更新時に自動でリリースノートテンプレートを生成
- コミット履歴から変更内容を自動抽出
- リリースノートの形式チェックを自動実行
description:
globs:
alwaysApply: true
---
